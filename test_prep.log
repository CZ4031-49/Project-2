DEBUG:root:Current query: 
        SELECT s_suppkey, SUM(p_retailprice)
        FROM supplier s, part p, partsupp ps
        WHERE ps.ps_partkey = p.p_partkey AND
              ps.ps_suppkey = s.s_suppkey
        GROUP BY s.s_suppkey 
        
DEBUG:root:length of plans for current query: 34
DEBUG:root:debug cur plan:  {
    "Plan": {
        "Async Capable": false,
        "Group Key": [
            "s.s_suppkey"
        ],
        "Node Type": "Aggregate",
        "Parallel Aware": false,
        "Partial Mode": "Simple",
        "Plan Rows": 10000,
        "Plan Width": 36,
        "Plans": [
            {
                "Async Capable": false,
                "Inner Unique": true,
                "Join Type": "Inner",
                "Node Type": "Nested Loop",
                "Parallel Aware": false,
                "Parent Relationship": "Outer",
                "Plan Rows": 800000,
                "Plan Width": 10,
                "Plans": [
                    {
                        "Async Capable": false,
                        "Inner Unique": false,
                        "Join Type": "Inner",
                        "Node Type": "Nested Loop",
                        "Parallel Aware": false,
                        "Parent Relationship": "Outer",
                        "Plan Rows": 800000,
                        "Plan Width": 8,
                        "Plans": [
                            {
                                "Alias": "s",
                                "Async Capable": false,
                                "Index Name": "supplier_pkey",
                                "Node Type": "Index Only Scan",
                                "Parallel Aware": false,
                                "Parent Relationship": "Outer",
                                "Plan Rows": 10000,
                                "Plan Width": 4,
                                "Relation Name": "supplier",
                                "Scan Direction": "Forward",
                                "Startup Cost": 10000000000.28,
                                "Total Cost": 10000000270.28
                            },
                            {
                                "Alias": "ps",
                                "Async Capable": false,
                                "Node Type": "Bitmap Heap Scan",
                                "Parallel Aware": false,
                                "Parent Relationship": "Inner",
                                "Plan Rows": 80,
                                "Plan Width": 8,
                                "Plans": [
                                    {
                                        "Async Capable": false,
                                        "Index Cond": "(ps_suppkey = s.s_suppkey)",
                                        "Index Name": "partsupp_pkey",
                                        "Node Type": "Bitmap Index Scan",
                                        "Parallel Aware": false,
                                        "Parent Relationship": "Outer",
                                        "Plan Rows": 80,
                                        "Plan Width": 0,
                                        "Startup Cost": 0.0,
                                        "Total Cost": 6001.31
                                    }
                                ],
                                "Recheck Cond": "(ps_suppkey = s.s_suppkey)",
                                "Relation Name": "partsupp",
                                "Startup Cost": 6001.33,
                                "Total Cost": 6010.26
                            }
                        ],
                        "Startup Cost": 10000006001.61,
                        "Total Cost": 10060110909.96
                    },
                    {
                        "Async Capable": false,
                        "Cache Key": "ps.ps_partkey",
                        "Cache Mode": "logical",
                        "Node Type": "Memoize",
                        "Parallel Aware": false,
                        "Parent Relationship": "Inner",
                        "Plan Rows": 1,
                        "Plan Width": 10,
                        "Plans": [
                            {
                                "Alias": "p",
                                "Async Capable": false,
                                "Node Type": "Bitmap Heap Scan",
                                "Parallel Aware": false,
                                "Parent Relationship": "Outer",
                                "Plan Rows": 1,
                                "Plan Width": 10,
                                "Plans": [
                                    {
                                        "Async Capable": false,
                                        "Index Cond": "(p_partkey = ps.ps_partkey)",
                                        "Index Name": "part_pkey",
                                        "Node Type": "Bitmap Index Scan",
                                        "Parallel Aware": false,
                                        "Parent Relationship": "Outer",
                                        "Plan Rows": 1,
                                        "Plan Width": 0,
                                        "Startup Cost": 0.0,
                                        "Total Cost": 0.43
                                    }
                                ],
                                "Recheck Cond": "(p_partkey = ps.ps_partkey)",
                                "Relation Name": "part",
                                "Startup Cost": 0.43,
                                "Total Cost": 4.44
                            }
                        ],
                        "Startup Cost": 0.44,
                        "Total Cost": 4.45
                    }
                ],
                "Startup Cost": 10000006002.05,
                "Total Cost": 10063150534.8
            }
        ],
        "Startup Cost": 10000006002.05,
        "Strategy": "Sorted",
        "Total Cost": 10063154659.8
    }
}
DEBUG:root:Annotated best plan:  {
    "Plan": {
        "Async Capable": false,
        "Contain Relation": [
            "supplier",
            "partsupp",
            "part"
        ],
        "Explanation": "A general aggregation node without specifying aggregation method.",
        "Group Key": [
            "s.s_suppkey"
        ],
        "Node Type": "Aggregate",
        "Parallel Aware": false,
        "Partial Mode": "Simple",
        "Plan Rows": 10000,
        "Plan Width": 36,
        "Plans": [
            {
                "Async Capable": false,
                "Contain Relation": [
                    "supplier",
                    "partsupp",
                    "part"
                ],
                "Explanation": "Node type: Nested Loop: \nBoth operands don't use index scans on their original relations, this is possible especially for deep join trees with lots of intermediate results. In this case a nested loop join is preferred possibly because size of two operands are both small. \nSize of two operands: [800000, 1]\n\n This nested loop join has no filter, it can because either conditions are pushed down to scans or relations are small so a NL join is preferred.",
                "Inner Unique": true,
                "Join Type": "Inner",
                "Node Type": "Nested Loop",
                "Parallel Aware": false,
                "Parent Relationship": "Outer",
                "Plan Rows": 800000,
                "Plan Width": 10,
                "Plans": [
                    {
                        "Async Capable": false,
                        "Contain Relation": [
                            "supplier",
                            "partsupp"
                        ],
                        "Explanation": "Node type: Nested Loop: \nThis nested loop join has two operands that does index scan on original relation, hence this nested loop is a zig-zag join on both indices.\n This nested loop join has no filter, it can because either conditions are pushed down to scans or relations are small so a NL join is preferred.",
                        "Inner Unique": false,
                        "Join Type": "Inner",
                        "Node Type": "Nested Loop",
                        "Parallel Aware": false,
                        "Parent Relationship": "Outer",
                        "Plan Rows": 800000,
                        "Plan Width": 8,
                        "Plans": [
                            {
                                "Alias": "s",
                                "Async Capable": false,
                                "Contain Relation": [
                                    "supplier"
                                ],
                                "Explanation": "Node type: Index Only Scan: \nThis is an Index Only Scan node.\nThere is no condition on supplier index scan. Without knowing predecessors of this node, this index scan is likely to be selectedas there is likely to be a join that has condition on this relation, or has build relation very small so a join fetching probe relation index is prefered. \nThis node that has index scan in it child nodes is used by its direct parent node as nested loop join.",
                                "Has Child With Index": true,
                                "Index Name": "supplier_pkey",
                                "Node Type": "Index Only Scan",
                                "Parallel Aware": false,
                                "Parent Relationship": "Outer",
                                "Plan Rows": 10000,
                                "Plan Width": 4,
                                "Relation Name": "supplier",
                                "Scan Direction": "Forward",
                                "Startup Cost": 10000000000.28,
                                "Total Cost": 10000000270.28
                            },
                            {
                                "Alias": "ps",
                                "Async Capable": false,
                                "Contain Relation": [
                                    "partsupp"
                                ],
                                "Explanation": "Node type: Bitmap Heap Scan: \nA bitmap heap scan is always a direct parent of bitmap index scan.\nIt uses index bitmap generated by condition (ps_suppkey = s.s_suppkey) and fetch corresponding pages stored in the heap.\nThis node that has index scan in it child nodes is used by its direct parent node as nested loop join.",
                                "Has Child With Index": true,
                                "Node Type": "Bitmap Heap Scan",
                                "Parallel Aware": false,
                                "Parent Relationship": "Inner",
                                "Plan Rows": 80,
                                "Plan Width": 8,
                                "Plans": [
                                    {
                                        "Async Capable": false,
                                        "Contain Relation": [],
                                        "Explanation": "Node type: Bitmap Index Scan: \nA bitmap index scan is used to generate a bitmap based on indices of selected attribute(s).\nIt has condition (ps_suppkey = s.s_suppkey).\nBit map index scan always has a bitmap heap scan node as its immediate parent node.",
                                        "Index Cond": "(ps_suppkey = s.s_suppkey)",
                                        "Index Name": "partsupp_pkey",
                                        "Node Type": "Bitmap Index Scan",
                                        "Parallel Aware": false,
                                        "Parent Relationship": "Outer",
                                        "Plan Rows": 80,
                                        "Plan Width": 0,
                                        "Startup Cost": 0.0,
                                        "Total Cost": 6001.31
                                    }
                                ],
                                "Recheck Cond": "(ps_suppkey = s.s_suppkey)",
                                "Relation Name": "partsupp",
                                "Startup Cost": 6001.33,
                                "Total Cost": 6010.26
                            }
                        ],
                        "Startup Cost": 10000006001.61,
                        "Total Cost": 10060110909.96
                    },
                    {
                        "Async Capable": false,
                        "Cache Key": "ps.ps_partkey",
                        "Cache Mode": "logical",
                        "Contain Relation": [
                            "part"
                        ],
                        "Explanation": "Node type: Memoize: \nA memoize node caches intermediate result for speed up. It isan auxiliary node specific to machine.",
                        "Node Type": "Memoize",
                        "Parallel Aware": false,
                        "Parent Relationship": "Inner",
                        "Plan Rows": 1,
                        "Plan Width": 10,
                        "Plans": [
                            {
                                "Alias": "p",
                                "Async Capable": false,
                                "Contain Relation": [
                                    "part"
                                ],
                                "Explanation": "Node type: Bitmap Heap Scan: \nA bitmap heap scan is always a direct parent of bitmap index scan.\nIt uses index bitmap generated by condition (p_partkey = ps.ps_partkey) and fetch corresponding pages stored in the heap.",
                                "Has Child With Index": true,
                                "Node Type": "Bitmap Heap Scan",
                                "Parallel Aware": false,
                                "Parent Relationship": "Outer",
                                "Plan Rows": 1,
                                "Plan Width": 10,
                                "Plans": [
                                    {
                                        "Async Capable": false,
                                        "Contain Relation": [],
                                        "Explanation": "Node type: Bitmap Index Scan: \nA bitmap index scan is used to generate a bitmap based on indices of selected attribute(s).\nIt has condition (p_partkey = ps.ps_partkey).\nBit map index scan always has a bitmap heap scan node as its immediate parent node.",
                                        "Index Cond": "(p_partkey = ps.ps_partkey)",
                                        "Index Name": "part_pkey",
                                        "Node Type": "Bitmap Index Scan",
                                        "Parallel Aware": false,
                                        "Parent Relationship": "Outer",
                                        "Plan Rows": 1,
                                        "Plan Width": 0,
                                        "Startup Cost": 0.0,
                                        "Total Cost": 0.43
                                    }
                                ],
                                "Recheck Cond": "(p_partkey = ps.ps_partkey)",
                                "Relation Name": "part",
                                "Startup Cost": 0.43,
                                "Total Cost": 4.44
                            }
                        ],
                        "Startup Cost": 0.44,
                        "Total Cost": 4.45
                    }
                ],
                "Startup Cost": 10000006002.05,
                "Total Cost": 10063150534.8
            }
        ],
        "Startup Cost": 10000006002.05,
        "Strategy": "Sorted",
        "Total Cost": 10063154659.8
    }
}
DEBUG:root:debug alternate plan:  {
    "Plan": {
        "Async Capable": false,
        "Group Key": [
            "s.s_suppkey"
        ],
        "Node Type": "Aggregate",
        "Parallel Aware": false,
        "Partial Mode": "Simple",
        "Plan Rows": 10000,
        "Plan Width": 36,
        "Plans": [
            {
                "Async Capable": false,
                "Inner Unique": true,
                "Join Type": "Inner",
                "Node Type": "Nested Loop",
                "Parallel Aware": false,
                "Parent Relationship": "Outer",
                "Plan Rows": 800000,
                "Plan Width": 10,
                "Plans": [
                    {
                        "Async Capable": false,
                        "Inner Unique": false,
                        "Join Type": "Inner",
                        "Node Type": "Nested Loop",
                        "Parallel Aware": false,
                        "Parent Relationship": "Outer",
                        "Plan Rows": 800000,
                        "Plan Width": 8,
                        "Plans": [
                            {
                                "Alias": "s",
                                "Async Capable": false,
                                "Index Name": "supplier_pkey",
                                "Node Type": "Index Only Scan",
                                "Parallel Aware": false,
                                "Parent Relationship": "Outer",
                                "Plan Rows": 10000,
                                "Plan Width": 4,
                                "Relation Name": "supplier",
                                "Scan Direction": "Forward",
                                "Startup Cost": 10000000000.28,
                                "Total Cost": 10000000270.28
                            },
                            {
                                "Alias": "ps",
                                "Async Capable": false,
                                "Node Type": "Bitmap Heap Scan",
                                "Parallel Aware": false,
                                "Parent Relationship": "Inner",
                                "Plan Rows": 80,
                                "Plan Width": 8,
                                "Plans": [
                                    {
                                        "Async Capable": false,
                                        "Index Cond": "(ps_suppkey = s.s_suppkey)",
                                        "Index Name": "partsupp_pkey",
                                        "Node Type": "Bitmap Index Scan",
                                        "Parallel Aware": false,
                                        "Parent Relationship": "Outer",
                                        "Plan Rows": 80,
                                        "Plan Width": 0,
                                        "Startup Cost": 0.0,
                                        "Total Cost": 6001.31
                                    }
                                ],
                                "Recheck Cond": "(ps_suppkey = s.s_suppkey)",
                                "Relation Name": "partsupp",
                                "Startup Cost": 6001.33,
                                "Total Cost": 6010.26
                            }
                        ],
                        "Startup Cost": 20000006001.61,
                        "Total Cost": 20060110909.96
                    },
                    {
                        "Async Capable": false,
                        "Cache Key": "ps.ps_partkey",
                        "Cache Mode": "logical",
                        "Node Type": "Memoize",
                        "Parallel Aware": false,
                        "Parent Relationship": "Inner",
                        "Plan Rows": 1,
                        "Plan Width": 10,
                        "Plans": [
                            {
                                "Alias": "p",
                                "Async Capable": false,
                                "Node Type": "Bitmap Heap Scan",
                                "Parallel Aware": false,
                                "Parent Relationship": "Outer",
                                "Plan Rows": 1,
                                "Plan Width": 10,
                                "Plans": [
                                    {
                                        "Async Capable": false,
                                        "Index Cond": "(p_partkey = ps.ps_partkey)",
                                        "Index Name": "part_pkey",
                                        "Node Type": "Bitmap Index Scan",
                                        "Parallel Aware": false,
                                        "Parent Relationship": "Outer",
                                        "Plan Rows": 1,
                                        "Plan Width": 0,
                                        "Startup Cost": 0.0,
                                        "Total Cost": 0.43
                                    }
                                ],
                                "Recheck Cond": "(p_partkey = ps.ps_partkey)",
                                "Relation Name": "part",
                                "Startup Cost": 0.43,
                                "Total Cost": 4.44
                            }
                        ],
                        "Startup Cost": 0.44,
                        "Total Cost": 4.45
                    }
                ],
                "Startup Cost": 30000006002.05,
                "Total Cost": 30063150534.8
            }
        ],
        "Startup Cost": 30000006002.05,
        "Strategy": "Sorted",
        "Total Cost": 30063154659.8
    }
}
DEBUG:root:Annotated alternate plan:  {
    "Plan": {
        "Async Capable": false,
        "Contain Relation": [
            "supplier",
            "partsupp",
            "part"
        ],
        "Explanation": "A general aggregation node without specifying aggregation method.",
        "Group Key": [
            "s.s_suppkey"
        ],
        "Node Type": "Aggregate",
        "Parallel Aware": false,
        "Partial Mode": "Simple",
        "Plan Rows": 10000,
        "Plan Width": 36,
        "Plans": [
            {
                "Async Capable": false,
                "Contain Relation": [
                    "supplier",
                    "partsupp",
                    "part"
                ],
                "Explanation": "Node type: Nested Loop: \nBoth operands don't use index scans on their original relations, this is possible especially for deep join trees with lots of intermediate results. In this case a nested loop join is preferred possibly because size of two operands are both small. \nSize of two operands: [800000, 1]\n\n This nested loop join has no filter, it can because either conditions are pushed down to scans or relations are small so a NL join is preferred.",
                "Inner Unique": true,
                "Join Type": "Inner",
                "Node Type": "Nested Loop",
                "Parallel Aware": false,
                "Parent Relationship": "Outer",
                "Plan Rows": 800000,
                "Plan Width": 10,
                "Plans": [
                    {
                        "Async Capable": false,
                        "Contain Relation": [
                            "supplier",
                            "partsupp"
                        ],
                        "Explanation": "Node type: Nested Loop: \nThis nested loop join has two operands that does index scan on original relation, hence this nested loop is a zig-zag join on both indices.\n This nested loop join has no filter, it can because either conditions are pushed down to scans or relations are small so a NL join is preferred.",
                        "Inner Unique": false,
                        "Join Type": "Inner",
                        "Node Type": "Nested Loop",
                        "Parallel Aware": false,
                        "Parent Relationship": "Outer",
                        "Plan Rows": 800000,
                        "Plan Width": 8,
                        "Plans": [
                            {
                                "Alias": "s",
                                "Async Capable": false,
                                "Contain Relation": [
                                    "supplier"
                                ],
                                "Explanation": "Node type: Index Only Scan: \nThis is an Index Only Scan node.\nThere is no condition on supplier index scan. Without knowing predecessors of this node, this index scan is likely to be selectedas there is likely to be a join that has condition on this relation, or has build relation very small so a join fetching probe relation index is prefered. \nThis node that has index scan in it child nodes is used by its direct parent node as nested loop join.",
                                "Has Child With Index": true,
                                "Index Name": "supplier_pkey",
                                "Node Type": "Index Only Scan",
                                "Parallel Aware": false,
                                "Parent Relationship": "Outer",
                                "Plan Rows": 10000,
                                "Plan Width": 4,
                                "Relation Name": "supplier",
                                "Scan Direction": "Forward",
                                "Startup Cost": 10000000000.28,
                                "Total Cost": 10000000270.28
                            },
                            {
                                "Alias": "ps",
                                "Async Capable": false,
                                "Contain Relation": [
                                    "partsupp"
                                ],
                                "Explanation": "Node type: Bitmap Heap Scan: \nA bitmap heap scan is always a direct parent of bitmap index scan.\nIt uses index bitmap generated by condition (ps_suppkey = s.s_suppkey) and fetch corresponding pages stored in the heap.\nThis node that has index scan in it child nodes is used by its direct parent node as nested loop join.",
                                "Has Child With Index": true,
                                "Node Type": "Bitmap Heap Scan",
                                "Parallel Aware": false,
                                "Parent Relationship": "Inner",
                                "Plan Rows": 80,
                                "Plan Width": 8,
                                "Plans": [
                                    {
                                        "Async Capable": false,
                                        "Contain Relation": [],
                                        "Explanation": "Node type: Bitmap Index Scan: \nA bitmap index scan is used to generate a bitmap based on indices of selected attribute(s).\nIt has condition (ps_suppkey = s.s_suppkey).\nBit map index scan always has a bitmap heap scan node as its immediate parent node.",
                                        "Index Cond": "(ps_suppkey = s.s_suppkey)",
                                        "Index Name": "partsupp_pkey",
                                        "Node Type": "Bitmap Index Scan",
                                        "Parallel Aware": false,
                                        "Parent Relationship": "Outer",
                                        "Plan Rows": 80,
                                        "Plan Width": 0,
                                        "Startup Cost": 0.0,
                                        "Total Cost": 6001.31
                                    }
                                ],
                                "Recheck Cond": "(ps_suppkey = s.s_suppkey)",
                                "Relation Name": "partsupp",
                                "Startup Cost": 6001.33,
                                "Total Cost": 6010.26
                            }
                        ],
                        "Startup Cost": 20000006001.61,
                        "Total Cost": 20060110909.96
                    },
                    {
                        "Async Capable": false,
                        "Cache Key": "ps.ps_partkey",
                        "Cache Mode": "logical",
                        "Contain Relation": [
                            "part"
                        ],
                        "Explanation": "Node type: Memoize: \nA memoize node caches intermediate result for speed up. It isan auxiliary node specific to machine.",
                        "Node Type": "Memoize",
                        "Parallel Aware": false,
                        "Parent Relationship": "Inner",
                        "Plan Rows": 1,
                        "Plan Width": 10,
                        "Plans": [
                            {
                                "Alias": "p",
                                "Async Capable": false,
                                "Contain Relation": [
                                    "part"
                                ],
                                "Explanation": "Node type: Bitmap Heap Scan: \nA bitmap heap scan is always a direct parent of bitmap index scan.\nIt uses index bitmap generated by condition (p_partkey = ps.ps_partkey) and fetch corresponding pages stored in the heap.",
                                "Has Child With Index": true,
                                "Node Type": "Bitmap Heap Scan",
                                "Parallel Aware": false,
                                "Parent Relationship": "Outer",
                                "Plan Rows": 1,
                                "Plan Width": 10,
                                "Plans": [
                                    {
                                        "Async Capable": false,
                                        "Contain Relation": [],
                                        "Explanation": "Node type: Bitmap Index Scan: \nA bitmap index scan is used to generate a bitmap based on indices of selected attribute(s).\nIt has condition (p_partkey = ps.ps_partkey).\nBit map index scan always has a bitmap heap scan node as its immediate parent node.",
                                        "Index Cond": "(p_partkey = ps.ps_partkey)",
                                        "Index Name": "part_pkey",
                                        "Node Type": "Bitmap Index Scan",
                                        "Parallel Aware": false,
                                        "Parent Relationship": "Outer",
                                        "Plan Rows": 1,
                                        "Plan Width": 0,
                                        "Startup Cost": 0.0,
                                        "Total Cost": 0.43
                                    }
                                ],
                                "Recheck Cond": "(p_partkey = ps.ps_partkey)",
                                "Relation Name": "part",
                                "Startup Cost": 0.43,
                                "Total Cost": 4.44
                            }
                        ],
                        "Startup Cost": 0.44,
                        "Total Cost": 4.45
                    }
                ],
                "Startup Cost": 30000006002.05,
                "Total Cost": 30063150534.8
            }
        ],
        "Startup Cost": 30000006002.05,
        "Strategy": "Sorted",
        "Total Cost": 30063154659.8
    }
}
